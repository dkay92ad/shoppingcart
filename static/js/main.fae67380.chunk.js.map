{"version":3,"sources":["components/footer-details/FooterDetailsComponent.js","components/modal/ModalComponent.js","App.js","serviceWorker.js","index.js"],"names":["FooterDetails","props","className","cartQty","cartTotalPrice","disabled","onClick","checkoutHandler","ModalComponent","title","closeModalHandler","ProductComponent","React","lazy","App","setState","showModalPopup","productAddHandler","price","prevState","parseInt","productRemoveHandler","state","products","fetch","then","response","json","data","product_list","catch","err","console","log","productsArrayDisplay","this","map","product","key","Product_id","fallback","quantity","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fae67380.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FooterDetailsComponent.css';\r\n\r\nconst FooterDetails = (props) => {\r\n    return (\r\n        <div className=\"footer-details\">\r\n            <div className=\"footer-left\">\r\n              <div className=\"left quantity\">Qty {props.cartQty}</div>\r\n              <div className=\"left total\">Total {props.cartTotalPrice}</div>\r\n            </div>\r\n            <button \r\n            className = \"footer-right\" \r\n            disabled = {!props.cartTotalPrice}\r\n            onClick = {() => {\r\n              props.checkoutHandler();\r\n            }}>CHECKOUT</button>\r\n          </div>\r\n    );\r\n};\r\n\r\nexport default FooterDetails;","import React from 'react';\r\nimport './ModalComponent.css';\r\n\r\nconst ModalComponent = (props) => {\r\n    return (\r\n        <div className=\"modal-popup\">\r\n            <div \r\n            title=\"Close\" \r\n            className=\"close-modal-popup\" \r\n            onClick = {()=>{props.closeModalHandler()}}>X</div>\r\n            <div className=\"modal-content\">\r\n            <div className=\"total-price\">Total price: {props.cartTotalPrice}</div>\r\n            <div className=\"trans-success\">Transaction successful!</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalComponent;","import React, { Component, Suspense } from 'react';\nimport './App.css';\nimport FooterDetailsComponent from './components/footer-details/FooterDetailsComponent';\nimport ModalComponent from './components/modal/ModalComponent';\nconst ProductComponent = React.lazy(() => import('./components/product/ProductComponent'));\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      products: [],\n      cartQty: 0,\n      cartTotalPrice: 0,\n      showModalPopup: false\n    }\n  }\n\n  componentDidMount(){\n    fetch('./data/data.json').then(\n      (response) => {\n        return response.json();\n      }\n    ).then(\n      (data) => {\n        //console.log(data);\n        this.setState({products: data.product_list});\n      }\n    ).catch((err) => {\n      console.log(err);\n    })\n  }\n  componentDidUpdate(){\n    console.log('conponentDidUpdate...');\n  }\n  checkoutHandler = () => {\n    this.setState({showModalPopup: true});\n  }\n  productAddHandler = (price) => {\n    this.setState((prevState) => ({cartQty: prevState.cartQty + 1 ,\n      cartTotalPrice: parseInt(prevState.cartTotalPrice) + parseInt(price)}));\n  }\n  productRemoveHandler = (price) => {\n    this.setState((prevState) => ({cartQty: prevState.cartQty - 1 ,\n      cartTotalPrice: prevState.cartTotalPrice - price}));\n  }\n  closeModalHandler = () => {\n    this.setState({showModalPopup: false,\n      cartQty: 0,\n      cartTotalPrice: 0})\n  }\n\n  render() {\n    const productsArrayDisplay = this.state.products.map((product) => {\n      return (\n        <Suspense key={product.Product_id} fallback={<div>Loading...</div>}>\n          <ProductComponent \n          key={product.Product_id} \n          product = {product} \n          quantity = {this.state.cartQty}\n          productAddHandler = {this.productAddHandler}\n          productRemoveHandler = {this.productRemoveHandler} />\n        </Suspense>\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        {productsArrayDisplay}\n        {this.state.showModalPopup && <ModalComponent \n        closeModalHandler = {this.closeModalHandler}\n        cartTotalPrice = {this.state.cartTotalPrice}\n        />}\n        <footer>\n          <FooterDetailsComponent \n          cartQty = {this.state.cartQty} \n          cartTotalPrice = {this.state.cartTotalPrice}\n          checkoutHandler = {this.checkoutHandler}\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}